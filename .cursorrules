# PianoAI Coach - Cursor AI Rules

## 프로젝트 컨텍스트
- 웹 기반 AI 피아노 연습 도구
- HTML5, CSS3, Vanilla JavaScript 사용
- Web Audio API, Tone.js 활용
- 음원 분석 및 연주 비교 기능

## 코딩 스타일
- ES6+ 모던 JavaScript 사용
- 클래스 기반 구조 선호
- async/await 패턴 사용
- 명확한 변수명과 함수명 사용

## 파일 구조 규칙
- HTML: index.html (메인 파일)
- CSS: css/styles.css (스타일)
- JS: js/ 폴더에 기능별 분리
- 에셋: assets/ 폴더에 정리

## 개발 우선순위
1. 사용자 경험 최적화
2. 오디오 처리 안정성
3. 브라우저 호환성
4. 성능 최적화

## 금지사항
- localStorage/sessionStorage 사용 금지 (Claude 환경 제약)
- 복잡한 빌드 도구 사용 금지
- 외부 API 의존성 최소화 

decodeAudioData(arrayBuffer) {
    return new Promise((resolve, reject) => {
        this.audioContext.decodeAudioData(
            arrayBuffer,
            (audioBuffer) => {
                resolve(audioBuffer);
            },
            (error) => {
                reject(new Error('오디오 디코딩 오류: ' + error));
            }
        );
    });
} 

// 1. 업로드 버튼을 가져옵니다.
const uploadBtn = document.getElementById('uploadBtn'); // 실제 id에 맞게 수정

// 2. 클릭 이벤트 핸들러 내부에서만 AudioAnalyzer 생성 및 초기화
uploadBtn.addEventListener('click', async () => {
    // 반드시 클릭 시점에만 생성
    audioAnalyzer = new AudioAnalyzer();
    await audioAnalyzer.initialize();

    // (중요) AudioContext가 suspended면 resume
    if (audioAnalyzer.audioContext && audioAnalyzer.audioContext.state === 'suspended') {
        await audioAnalyzer.audioContext.resume();
    }

    // ...이하 분석 코드(파일 읽기, 분석 등)...
}); 

if (this.audioContext.state !== 'running') {
    alert('분석을 시작하려면 버튼을 클릭해 주세요.');
} 

if (this.audioContext && this.audioContext.state === 'suspended') {
    await this.audioContext.resume();
} 

const recordBtn = document.getElementById('recordBtn'); // 실제 id에 맞게 수정

recordBtn.addEventListener('click', async () => {
    audioAnalyzer = new AudioAnalyzer();
    await audioAnalyzer.initialize();

    if (audioAnalyzer.audioContext && audioAnalyzer.audioContext.state === 'suspended') {
        await audioAnalyzer.audioContext.resume();
    }

    // ...이하 녹음/분석 코드...
}); 

async analyzeFile(file) {
    if (!this.isInitialized) {
        await this.initialize();
    }
    // (중요) AudioContext가 suspended면 resume
    if (this.audioContext && this.audioContext.state === 'suspended') {
        await this.audioContext.resume();
    }
    // ...이하 기존 분석 코드...
} 